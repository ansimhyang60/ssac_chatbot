{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3063,"status":"ok","timestamp":1653670279124,"user":{"displayName":"Alex Kim","userId":"14000404201898213847"},"user_tz":-540},"id":"Zj6BneWR1cNh","outputId":"a1a63bad-b1d1-4a0b-fc1e-b393aece0e73"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: transformers in /usr/local/lib/python3.7/dist-packages (4.19.2)\n","Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.7/dist-packages (from transformers) (4.11.3)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (21.3)\n","Requirement already satisfied: requests in /usr/local/lib/python3.7/dist-packages (from transformers) (2.23.0)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (1.21.6)\n","Requirement already satisfied: filelock in /usr/local/lib/python3.7/dist-packages (from transformers) (3.7.0)\n","Requirement already satisfied: huggingface-hub<1.0,>=0.1.0 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.7.0)\n","Requirement already satisfied: tokenizers!=0.11.3,<0.13,>=0.11.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (0.12.1)\n","Requirement already satisfied: pyyaml>=5.1 in /usr/local/lib/python3.7/dist-packages (from transformers) (6.0)\n","Requirement already satisfied: regex!=2019.12.17 in /usr/local/lib/python3.7/dist-packages (from transformers) (2019.12.20)\n","Requirement already satisfied: tqdm>=4.27 in /usr/local/lib/python3.7/dist-packages (from transformers) (4.64.0)\n","Requirement already satisfied: typing-extensions>=3.7.4.3 in /usr/local/lib/python3.7/dist-packages (from huggingface-hub<1.0,>=0.1.0->transformers) (4.2.0)\n","Requirement already satisfied: pyparsing!=3.0.5,>=2.0.2 in /usr/local/lib/python3.7/dist-packages (from packaging>=20.0->transformers) (3.0.9)\n","Requirement already satisfied: zipp>=0.5 in /usr/local/lib/python3.7/dist-packages (from importlib-metadata->transformers) (3.8.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (2022.5.18.1)\n","Requirement already satisfied: chardet<4,>=3.0.2 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (3.0.4)\n","Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,<1.26,>=1.21.1 in /usr/local/lib/python3.7/dist-packages (from requests->transformers) (1.24.3)\n"]}],"source":["!pip install transformers"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"DJXMxpwi2l4g"},"outputs":[],"source":["import pandas as pd\n","from transformers import PreTrainedTokenizerFast, GPT2LMHeadModel\n","from torch.utils.data import DataLoader, Dataset\n","import torch\n","from tqdm import tqdm"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"TWnCNkXW2VA4"},"outputs":[],"source":["#data_raw = pd.read_csv('/content/drive/MyDrive/Saltlux 인공지능 자연어처리/220500_Final_project/220508_1st_output/dataset/df_preprocessing_220524.csv', encoding='cp949')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W0io56gN8VHj"},"outputs":[],"source":["#data_raw = pd.read_csv('/content/drive/MyDrive/Saltlux 인공지능 자연어처리/220500_Final_project/220525/unified.csv', encoding='cp949')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"mmhAb5OvZNx5"},"outputs":[],"source":["data_raw = pd.read_csv('/content/drive/MyDrive/Saltlux 인공지능 자연어처리/220500_Final_project/220525/data_equal_uni.csv', encoding='cp949')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"W0QcX9p7ZYsa"},"outputs":[],"source":["data_raw.drop(columns = ['Unnamed: 0'], inplace=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Z8TO-cuJ2wxX"},"outputs":[],"source":["U_TKN = '<usr>'\n","S_TKN = '<sys>'\n","BOS = '</s>'\n","EOS = '</s>'\n","MASK = '<unused0>'\n","SENT1 = '<unused1>'\n","SENT2 = '<unused2>'\n","PAD = '<pad>'"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":2740,"status":"ok","timestamp":1653670285770,"user":{"displayName":"Alex Kim","userId":"14000404201898213847"},"user_tz":-540},"id":"xyi6nBnJ7-ox","outputId":"7331b89c-1fa2-4fd4-9eff-dc8e7da6c871"},"outputs":[{"name":"stderr","output_type":"stream","text":["The tokenizer class you load from this checkpoint is not the same type as the class this function is called from. It may result in unexpected tokenization. \n","The tokenizer class you load from this checkpoint is 'GPT2Tokenizer'. \n","The class this function is called from is 'PreTrainedTokenizerFast'.\n"]}],"source":["Tokenizer = PreTrainedTokenizerFast.from_pretrained(\"skt/kogpt2-base-v2\",\n","            bos_token=BOS, eos_token=EOS, unk_token='<unk>',\n","            pad_token=PAD, mask_token=MASK) \n","model_kogpt2 = GPT2LMHeadModel.from_pretrained('skt/kogpt2-base-v2')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3a9ih1eC5BkT"},"outputs":[],"source":["# class mk_Dataset(Dataset):\n","#   def __init__(self, chats, max_len = 64):\n","#         self._data = chats\n","#         self.first = True\n","#         self.q_token = U_TKN\n","#         self.a_token = S_TKN\n","#         self.sent_token_mc = SENT1\n","#         self.sent_token_sub = SENT2\n","#         self.bos = BOS\n","#         self.eos = EOS\n","#         self.mask = MASK\n","#         self.pad = PAD\n","#         self.max_len = max_len\n","#         self.tokenizer = Tokenizer \n","\n","#   def __getitem__(self, idx):\n","#     turn = self._data.iloc[idx]\n","#     q = turn['usr']\n","#     a = turn['sys']\n","#     sentiment_m = str(turn['mc_enco'])\n","#     sentiment_s = str(turn['sub_enco'])\n","#     q_token = self.tokenizer.tokenize(self.q_token + q + self.sent_token_mc + sentiment_m + self.sent_token_sub + sentiment_s)\n","#     q_len = len(q_token)\n","#     a_token = self.tokenizer.tokenize(self.a_token + a + self.eos)\n","#     a_len = len(a_token)\n","\n","#     if q_len + a_len > self.max_len:\n","#       a_len = self.max_len - q_len\n","#       if a_len <=0:\n","#         q_token = q_token[-(int(self.max_len/2)):]\n","#         q_len = len(q_token)\n","#         a_len = self.max_len - q_len\n","#         assert a > 0\n","    \n","#     a_token = a_token[:a_len]\n","#     a_len = len(a_token)\n","#     assert a_len == len(a_token), f'{a_len} ==? {len(a_token)}'\n","\n","#     token_ids = self.tokenizer.convert_tokens_to_ids(q_token + a_token)\n","#     labels_ids = token_ids\n","#     token_type_ids = [0]*len(q_token) + [1]*(self.max_len - len(q_token))\n","#     attention_mask = [1]*len(token_ids) + [0] * (self.max_len - len(token_ids))\n","\n","#     while len(token_ids) < self.max_len:\n","#       token_ids += [self.tokenizer.pad_token_id]\n","#     while len(labels_ids) < self.max_len:\n","#       labels_ids += [self.tokenizer.pad_token_id]\n","\n","#     self.tuble_data = {'input_ids' : torch.tensor(token_ids), \n","#                        'token_type_ids' : torch.tensor(token_type_ids),\n","#                        'attention_mask' : torch.tensor(attention_mask), \n","#                        'labels_ids' : torch.tensor(labels_ids)}  \n","\n","#     return self.tuble_data\n","\n","#   def __len__(self):\n","#     return len(self.tuble_data)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"883euhO-ZBd_"},"outputs":[],"source":["device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"bCDyDvhnAI_e"},"outputs":[],"source":["class mk_Dataset(Dataset):\n","  def __init__(self, chats, max_len = 64):\n","    self._data = chats\n","    self.first = True\n","    self.q_token = U_TKN\n","    self.a_token = S_TKN\n","    self.sent_token_mc = SENT1\n","    self.sent_token_sub = SENT2\n","    self.bos = BOS\n","    self.eos = EOS\n","    self.mask = MASK\n","    self.pad = PAD\n","    self.max_len = max_len\n","    self.tokenizer = Tokenizer\n","\n","    question = self._data.loc[:,'usr'].values\n","    answer = self._data.loc[:,'sys'].values\n","    sentiment_m = self._data.loc[:,'mc_enco']\n","    sentiment_s = self._data.loc[:,'sub_enco']\n","\n","    self.input_ids = []\n","    self.attention_mask = []\n","    self.token_type_ids = []\n","    self.labels = []\n","\n","    for q, a, sm, ss in zip(question, answer, sentiment_m, sentiment_s):\n","      q_t = self.tokenizer.tokenize(self.q_token + q + self.sent_token_mc + str(sm) + self.sent_token_sub + str(ss))\n","      q_len = len(q_t)\n","      a_t = self.tokenizer.tokenize(self.a_token + a + self.eos)\n","      a_len = len(a_t)\n","\n","      if q_len + a_len > self.max_len:\n","        a_len = self.max_len - q_len\n","        if a_len <= 0:\n","          q_t = q_t[-(int(self.max_len/2)):]\n","          q_len = len(q_t)\n","          a_len = self.max_len - q_len\n","          assert a_len > 0\n","      a_t = a_t[:a_len]\n","      a_len = len(a_t)\n","\n","      input_id = self.tokenizer.convert_tokens_to_ids(q_t + a_t)\n","      label = input_id\n","      token_type_id = [0] * len(q_t) + [1] * (self.max_len - len(q_t))\n","      attention = [1] * len(input_id) + [0] * (self.max_len - len(input_id))\n","\n","      while len(input_id) < self.max_len:\n","        input_id += [self.tokenizer.pad_token_id]\n","      while len(label) < self.max_len:\n","        label += [self.tokenizer.pad_token_id]\n","      \n","      self.input_ids.append(input_id)\n","      self.labels.append(label)\n","      self.token_type_ids.append(token_type_id)\n","      self.attention_mask.append(attention)\n","\n","  def __getitem__(self, index):\n","    input_ids_index = self.input_ids[index]\n","    attention_mask_index = self.token_type_ids[index]\n","    token_type_ids_index = self.attention_mask[index]\n","    labels_index = self.labels[index]\n","\n","    return {'input_ids':torch.tensor(input_ids_index).to(device), \n","            'token_type_ids': torch.tensor(attention_mask_index).to(device), \n","            'attention_mask': torch.tensor(token_type_ids_index).to(device), \n","            'labels': torch.tensor(labels_index).to(device)}\n","\n","  def __len__(self):\n","    return len(self._data)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Y_a-26nYTzX0"},"outputs":[],"source":["train_set = mk_Dataset(data_raw, max_len=64)\n","train_dataloader = DataLoader(train_set, batch_size=32, shuffle=True)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3449,"status":"ok","timestamp":1653670311743,"user":{"displayName":"Alex Kim","userId":"14000404201898213847"},"user_tz":-540},"id":"BxnK9iMHZNHR","outputId":"05f39c08-ce50-4870-888c-1a6c361dc600"},"outputs":[{"data":{"text/plain":["GPT2LMHeadModel(\n","  (transformer): GPT2Model(\n","    (wte): Embedding(51200, 768)\n","    (wpe): Embedding(1024, 768)\n","    (drop): Dropout(p=0.1, inplace=False)\n","    (h): ModuleList(\n","      (0): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (1): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (2): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (3): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (4): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (5): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (6): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (7): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (8): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (9): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (10): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","      (11): GPT2Block(\n","        (ln_1): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (attn): GPT2Attention(\n","          (c_attn): Conv1D()\n","          (c_proj): Conv1D()\n","          (attn_dropout): Dropout(p=0.1, inplace=False)\n","          (resid_dropout): Dropout(p=0.1, inplace=False)\n","        )\n","        (ln_2): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","        (mlp): GPT2MLP(\n","          (c_fc): Conv1D()\n","          (c_proj): Conv1D()\n","          (act): NewGELUActivation()\n","          (dropout): Dropout(p=0.1, inplace=False)\n","        )\n","      )\n","    )\n","    (ln_f): LayerNorm((768,), eps=1e-05, elementwise_affine=True)\n","  )\n","  (lm_head): Linear(in_features=768, out_features=51200, bias=False)\n",")"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["model_kogpt2.to(device)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nX0IaP55fXOf"},"outputs":[],"source":["optimizer = torch.optim.Adam(model_kogpt2.parameters(), lr=0.0001)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":28,"status":"ok","timestamp":1653670311746,"user":{"displayName":"Alex Kim","userId":"14000404201898213847"},"user_tz":-540},"id":"yklRc0uIgz8c","outputId":"dfc632ac-d3af-4c8a-85e4-9fea5de77ff2"},"outputs":[{"data":{"text/plain":["tensor(10.4621, device='cuda:0', grad_fn=<NllLossBackward0>)"]},"execution_count":15,"metadata":{},"output_type":"execute_result"}],"source":["model_kogpt2(**iter(train_dataloader).next()).loss"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"g5ckIk8RaKev","outputId":"3caab411-e34a-45a4-bc7b-c5e095e6aaee"},"outputs":[{"name":"stderr","output_type":"stream","text":[" 10%|█         | 1/10 [08:30<1:16:33, 510.37s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(1.3060, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 20%|██        | 2/10 [17:01<1:08:04, 510.58s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.9561, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 30%|███       | 3/10 [25:31<59:34, 510.67s/it]  "]},{"name":"stdout","output_type":"stream","text":["tensor(1.0107, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 40%|████      | 4/10 [34:02<51:04, 510.68s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.9325, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 50%|█████     | 5/10 [42:33<42:33, 510.70s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.7114, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 60%|██████    | 6/10 [51:03<34:02, 510.69s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.5705, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 70%|███████   | 7/10 [59:34<25:32, 510.71s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.5708, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 80%|████████  | 8/10 [1:08:05<17:01, 510.77s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.5052, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\r 90%|█████████ | 9/10 [1:16:36<08:30, 510.76s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.5581, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["100%|██████████| 10/10 [1:25:07<00:00, 510.73s/it]"]},{"name":"stdout","output_type":"stream","text":["tensor(0.4323, device='cuda:0', grad_fn=<NllLossBackward0>)\n"]},{"name":"stderr","output_type":"stream","text":["\n"]}],"source":["model_kogpt2.train()\n","for epoch in tqdm(range(10)):\n","  for data in train_dataloader:\n","    optimizer.zero_grad()\n","    loss = model_kogpt2(**data).loss\n","    loss.backward()\n","    optimizer.step()\n","  print(loss)\n","\n","try:\n","  torch.save({\n","      'epochs' : epoch,\n","      'model_state_dict' : model_kogpt2.state_dict(),\n","      'optimizer_state_dict' : optimizer.state_dict(),\n","      'loss' : loss\n","}, '/content/drive/MyDrive/Saltlux 인공지능 자연어처리/220500_Final_project/220525/220525_unified_equal_gpt_model.pt')\n","except:\n","  torch.save(model_kogpt2, '/content/drive/MyDrive/Saltlux 인공지능 자연어처리/220500_Final_project/220525/220525_unified_equal_gpt_model_full.pt')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true},"id":"LBZJhTXn9ZsC"},"outputs":[],"source":[""]}],"metadata":{"accelerator":"GPU","colab":{"background_execution":"on","collapsed_sections":[],"name":"new_kogpt.ipynb의 사본","provenance":[{"file_id":"1b6JzaBGz42YWqLKWYaFYDVpsc0fz5gwY","timestamp":1654585218404}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}